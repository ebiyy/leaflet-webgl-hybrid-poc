name: Deploy Demo to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Install Dioxus CLI
        uses: taiki-e/install-action@v2
        with:
          tool: dioxus-cli@0.6.3
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Install npm dependencies
        run: npm install
      
      - name: Install Tailwind CSS
        run: |
          # Download Tailwind CSS standalone CLI v4
          curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-linux-x64
          chmod +x tailwindcss-linux-x64
          mv tailwindcss-linux-x64 tailwindcss
      
      - name: Install WASM optimization tools
        run: |
          # Install binaryen for wasm-opt
          curl -L https://github.com/WebAssembly/binaryen/releases/download/version_121/binaryen-version_121-x86_64-linux.tar.gz | tar xz
          mv binaryen-version_121/bin/wasm-opt ./
          
          # Install wasm-tools
          curl -L https://github.com/bytecodealliance/wasm-tools/releases/download/v1.223.0/wasm-tools-1.223.0-x86_64-linux.tar.gz | tar xz
          mv wasm-tools-1.223.0-x86_64-linux/wasm-tools ./
          
          # Install wasm-snip
          cargo install wasm-snip --version 0.4.0
      
      - name: Bundle optimized WASM
        env:
          DX_BASE_PATH: leaflet-webgl-hybrid-poc
        run: |
          # Build with Dioxus CLI
          dx build --platform web --release
          
          # Move built files to dist directory
          mkdir -p dist
          cp -r target/dx/leaflet-webgl-hybrid-poc/release/web/public/* dist/
          
          # Fix asset paths: remove /./ pattern (Dioxus CLI 0.6.3 issue)
          sed -i 's#/\./assets#/leaflet-webgl-hybrid-poc/assets#g' dist/index.html
          
          # Inject CSS links into head (after the <meta charset="UTF-8" /> line)
          sed -i '/<meta charset="UTF-8" \/>/a\    <link rel="stylesheet" href="/leaflet-webgl-hybrid-poc/assets/style.css">\n    <link rel="stylesheet" href="/leaflet-webgl-hybrid-poc/assets/tailwind-generated.css">\n    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />' dist/index.html
          
          # Optimize WASM
          echo "### WASM Optimization Report" >> $GITHUB_STEP_SUMMARY
          echo "#### Original size:" >> $GITHUB_STEP_SUMMARY
          ls -lh dist/assets/*.wasm | awk '{print "- "$9": "$5}' >> $GITHUB_STEP_SUMMARY
          
          # Find WASM file
          WASM_FILE=$(find dist/assets -name "*.wasm" | head -1)
          
          # Step 1: wasm-opt with aggressive settings (with SIMD and bulk memory support)
          ./wasm-opt -Oz --strip-dwarf --strip-producers --vacuum \
                    --strip-target-features --remove-unused-module-elements \
                    --enable-simd --enable-bulk-memory \
                    -o "${WASM_FILE}.tmp1" "$WASM_FILE"
          
          # Step 2: wasm-snip to remove panic formatting
          wasm-snip -o "${WASM_FILE}.tmp2" \
                    --snip-rust-fmt-code --snip-rust-panicking-code \
                    "${WASM_FILE}.tmp1"
          
          # Step 3: wasm-tools strip
          ./wasm-tools strip "${WASM_FILE}.tmp2" -o "$WASM_FILE"
          
          # Clean up temp files
          rm -f "${WASM_FILE}.tmp1" "${WASM_FILE}.tmp2"
          
          # Report optimized size
          echo "#### Optimized size:" >> $GITHUB_STEP_SUMMARY
          ls -lh dist/assets/*.wasm | awk '{print "- "$9": "$5}' >> $GITHUB_STEP_SUMMARY
          
          # Create Brotli compressed version for size comparison
          brotli -q 11 -f -k "$WASM_FILE"
          echo "#### Brotli compressed size:" >> $GITHUB_STEP_SUMMARY
          ls -lh dist/assets/*.wasm.br | awk '{print "- "$9": "$5}' >> $GITHUB_STEP_SUMMARY
      
      - name: Create 404.html for SPA routing
        run: |
          cp dist/index.html dist/404.html
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4